// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LikeMindsFeed
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import Foundation
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
public struct Widget : Swift.Decodable {
  public let metadata: LikeMindsFeed.WidgetMetadata?
  public let parentEntityID: Swift.String?, id: Swift.String?, parentEntityType: Swift.String?
  public let updatedAt: Swift.Int?, createdAt: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
}
public struct WidgetMetadata : Swift.Decodable {
  public let body: Swift.String?
  public let ogTags: LikeMindsFeed.TopicFeedResponse.TopicResponse?
  public let size: Swift.Int?
  public let title: Swift.String?, name: Swift.String?
  public let coverImageURL: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetCommentResponse : Swift.Codable {
  public let comment: LikeMindsFeed.Comment?
  public let users: [Swift.String : LikeMindsFeed.User]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class GetTaggingListRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetTaggingListRequest
  public func build() -> LikeMindsFeed.GetTaggingListRequest
  public func searchName(_ searchName: Swift.String) -> LikeMindsFeed.GetTaggingListRequest
  public func page(_ page: Swift.Int) -> LikeMindsFeed.GetTaggingListRequest
  public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.GetTaggingListRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct EditCommentResponse : Swift.Codable {
  public let comment: LikeMindsFeed.Comment?
  public let users: [Swift.String : LikeMindsFeed.User]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class DecodeUrlRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.DecodeUrlRequest
  public func build() -> LikeMindsFeed.DecodeUrlRequest
  public func link(_ link: Swift.String) -> LikeMindsFeed.DecodeUrlRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct SearchMembersResponse : Swift.Decodable {
  public let community: LikeMindsFeed.Community?
  public let members: [LikeMindsFeed.User]?
  public let totalFilteredMembers: Swift.Int?, totalMembers: Swift.Int?, totalOnlyMembers: Swift.Int?, totalPendingMembers: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetFeedRoomRequest : Swift.Encodable {
  public init(feedroomId: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class GetFeedPostRequest : Swift.Encodable {
  public var page: Swift.Int
  public var pageSize: Swift.Int
  public static func builder() -> LikeMindsFeed.GetFeedPostRequest
  public func build() -> LikeMindsFeed.GetFeedPostRequest
  public func page(_ page: Swift.Int) -> LikeMindsFeed.GetFeedPostRequest
  public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.GetFeedPostRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct GetPostResponse : Swift.Decodable {
  public let post: LikeMindsFeed.Post?
  public let users: [Swift.String : LikeMindsFeed.User]?
  public let topics: [Swift.String : LikeMindsFeed.TopicFeedResponse.TopicResponse]?
  public let widgets: [Swift.String : LikeMindsFeed.Widget]?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class EditCommentRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.EditCommentRequest
  public func build() -> LikeMindsFeed.EditCommentRequest
  public func text(_ text: Swift.String) -> LikeMindsFeed.EditCommentRequest
  public func postId(_ postId: Swift.String) -> LikeMindsFeed.EditCommentRequest
  public func commentId(_ commentId: Swift.String) -> LikeMindsFeed.EditCommentRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class LikePostRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.LikePostRequest
  public func build() -> LikeMindsFeed.LikePostRequest
  public func postId(_ postId: Swift.String) -> LikeMindsFeed.LikePostRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol LikeMindsCallback : AnyObject {
  func loginRequiredCallback()
}
extension LikeMindsFeed.LikeMindsCallback {
  public func loginRequiredCallback()
}
@_hasMissingDesignatedInitializers public class LMClient {
  public static let shared: LikeMindsFeed.LMClient
  public func getBranding(request: LikeMindsFeed.BrandingRequest, response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.BrandingResponse>?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GetPostRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetPostRequest
  public func build() -> LikeMindsFeed.GetPostRequest
  public func postId(_ postId: Swift.String) -> LikeMindsFeed.GetPostRequest
  public func page(_ page: Swift.Int) -> LikeMindsFeed.GetPostRequest
  public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.GetPostRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct MemberMenu : Swift.Codable {
  public let route: Swift.String?
  public let title: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class GetNotificationFeedRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetNotificationFeedRequest
  public func build() -> LikeMindsFeed.GetNotificationFeedRequest
  public func page(_ page: Swift.Int) -> LikeMindsFeed.GetNotificationFeedRequest
  public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.GetNotificationFeedRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class LogoutRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.LogoutRequest
  public func build() -> LikeMindsFeed.LogoutRequest
  public func refreshToken(_ refreshToken: Swift.String) -> LikeMindsFeed.LogoutRequest
  public func deviceId(_ deviceId: Swift.String) -> LikeMindsFeed.LogoutRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class DeleteCommentRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.DeleteCommentRequest
  public func build() -> LikeMindsFeed.DeleteCommentRequest
  public func postId(_ postId: Swift.String) -> LikeMindsFeed.DeleteCommentRequest
  public func commentId(_ commentId: Swift.String) -> LikeMindsFeed.DeleteCommentRequest
  public func deleteReason(_ reason: Swift.String?) -> LikeMindsFeed.DeleteCommentRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class SearchMembersRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.SearchMembersRequest
  public func build() -> LikeMindsFeed.SearchMembersRequest
  public func page(_ page: Swift.Int) -> LikeMindsFeed.SearchMembersRequest
  public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.SearchMembersRequest
  public func search(_ search: Swift.String) -> LikeMindsFeed.SearchMembersRequest
  public func searchType(_ searchType: Swift.String) -> LikeMindsFeed.SearchMembersRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct GetUnreadNotificationCountResponse : Swift.Decodable {
  public let count: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
}
public struct ServiceAPI {
  public static let bucketURL: Swift.String
  public static let awsPoolIdCognito: Swift.String
  public static let secretAccessKey: Swift.String
  public static let accessKey: Swift.String
}
public struct EditPostResponse : Swift.Decodable {
  public let post: LikeMindsFeed.Post?
  public let users: [Swift.String : LikeMindsFeed.User]?
  public let widgets: [Swift.String : LikeMindsFeed.Widget]?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class GetReportTagRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetReportTagRequest
  public func build() -> LikeMindsFeed.GetReportTagRequest
  public func type(_ type: Swift.Int) -> LikeMindsFeed.GetReportTagRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class GetCommunityConfigurationRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetCommunityConfigurationRequest
  public func build() -> Self
  public func configurationTypes(_ configurationTypes: [Swift.String]) -> LikeMindsFeed.GetCommunityConfigurationRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct GetPostLikeResponse : Swift.Codable {
  public let likes: [LikeMindsFeed.Like]?
  public let totalCount: Swift.Int?
  public let users: [Swift.String : LikeMindsFeed.User]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Comment : Swift.Codable {
  public let id: Swift.String?, userId: Swift.String?, uuid: Swift.String?, deletedByUUID: Swift.String?
  public let postId: Swift.String?
  public let commentsCount: Swift.Int?, createdAt: Swift.Int?, level: Swift.Int?, likesCount: Swift.Int?
  public let isEdited: Swift.Bool?, isLiked: Swift.Bool?
  public let menuItems: [LikeMindsFeed.MenuItem]?
  public let replies: [LikeMindsFeed.Comment]?
  public let text: Swift.String?
  public let updatedAt: Swift.Int?
  public let tempId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class GetCommentRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetCommentRequest
  public func build() -> LikeMindsFeed.GetCommentRequest
  public func postId(_ postId: Swift.String) -> LikeMindsFeed.GetCommentRequest
  public func commentId(_ commentId: Swift.String) -> LikeMindsFeed.GetCommentRequest
  public func page(_ page: Swift.Int) -> LikeMindsFeed.GetCommentRequest
  public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.GetCommentRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct ReplyCommentResponse : Swift.Codable {
  public let comment: LikeMindsFeed.Comment?
  public let users: [Swift.String : LikeMindsFeed.User]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LMResponse<T> : Swift.Decodable where T : Swift.Decodable {
  public let success: Swift.Bool
  public let errorMessage: Swift.String?
  public let data: T?
  public init(from decoder: any Swift.Decoder) throws
}
public struct NoData : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct RegisterDeviceResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public protocol LMCallback : AnyObject {
  func login()
}
extension LikeMindsFeed.LMCallback {
  public func login()
}
@_hasMissingDesignatedInitializers final public class FeedTokenManager {
  public static var shared: LikeMindsFeed.FeedTokenManager {
    get
  }
  final public func lmCallback(_ lmCallback: any LikeMindsFeed.LMCallback) -> LikeMindsFeed.FeedTokenManager
  @objc deinit
}
public struct ActivityEntityData : Swift.Codable {
  public let id: Swift.String?
  public let attachments: [LikeMindsFeed.Attachment]?
  public let commentsCount: Swift.Int?, communityID: Swift.Int?, createdAt: Swift.Int?
  public let heading: Swift.String?
  public let isEdited: Swift.Bool?, isLiked: Swift.Bool?, isPinned: Swift.Bool?, isSaved: Swift.Bool?
  public let likesCount: Swift.Int?
  public let menuItems: [LikeMindsFeed.MenuItem]?
  public let text: Swift.String?
  public let updatedAt: Swift.Int?
  public let userId: Swift.String?, uuid: Swift.String?, deleteReason: Swift.String?, deletedByUUID: Swift.String?
  public let isDeleted: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetFeedOfFeedRoomResponse : Swift.Decodable {
  public let posts: [LikeMindsFeed.Post]?
  public let users: [LikeMindsFeed.LikedUser]
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class GetCommentLikesRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetCommentLikesRequest
  public func build() -> LikeMindsFeed.GetCommentLikesRequest
  public func postId(_ postId: Swift.String) -> LikeMindsFeed.GetCommentLikesRequest
  public func commentId(_ commentId: Swift.String) -> LikeMindsFeed.GetCommentLikesRequest
  public func page(_ page: Swift.Int) -> LikeMindsFeed.GetCommentLikesRequest
  public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.GetCommentLikesRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct Activity : Swift.Codable {
  public let id: Swift.String?
  public let action: Swift.Int?
  public let actionBy: [Swift.String]?
  public let actionOn: Swift.String?
  public let activityEntityData: LikeMindsFeed.ActivityEntityData?
  public let activityText: Swift.String?
  public let createdAt: Swift.Int?
  public let cta: Swift.String?, entityID: Swift.String?, entityOwnerID: Swift.String?, uuid: Swift.String?
  public let entityType: Swift.Int?
  public let isRead: Swift.Bool?
  public let updatedAt: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class InitiateUserRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.InitiateUserRequest
  public func build() -> LikeMindsFeed.InitiateUserRequest
  public func apiKey(_ apiKey: Swift.String) -> LikeMindsFeed.InitiateUserRequest
  public func isGuest(_ isGuest: Swift.Bool) -> LikeMindsFeed.InitiateUserRequest
  public func userName(_ userName: Swift.String) -> LikeMindsFeed.InitiateUserRequest
  public func uuid(_ uuid: Swift.String) -> LikeMindsFeed.InitiateUserRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class LikeCommentRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.LikeCommentRequest
  public func build() -> LikeMindsFeed.LikeCommentRequest
  public func postId(_ postId: Swift.String) -> LikeMindsFeed.LikeCommentRequest
  public func commentId(_ commentId: Swift.String) -> LikeMindsFeed.LikeCommentRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct InitiateUserResponse : Swift.Decodable {
  public let accessToken: Swift.String
  public let appAccess: Swift.Bool?
  public let community: LikeMindsFeed.Community?
  public let hasAnswers: Swift.Bool?
  public let refreshToken: Swift.String?
  public let user: LikeMindsFeed.User?
  public init(from decoder: any Swift.Decoder) throws
}
public struct InitialUser : Swift.Decodable {
  public let user: LikeMindsFeed.User
  public let community: LikeMindsFeed.Community
  public init(from decoder: any Swift.Decoder) throws
}
public struct SDKClientInfo : Swift.Codable {
  public let community: Swift.Int?, user: Swift.Int?
  public let userUniqueID: Swift.String?, uuid: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ReportEntityType : Swift.Int, Swift.Encodable {
  case post
  case comment
  case reply
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ReportRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.ReportRequest
  public func build() -> LikeMindsFeed.ReportRequest
  public func entityId(_ entityId: Swift.String) -> LikeMindsFeed.ReportRequest
  public func entityType(_ entityType: LikeMindsFeed.ReportEntityType) -> LikeMindsFeed.ReportRequest
  public func tagId(_ tagId: Swift.Int) -> LikeMindsFeed.ReportRequest
  public func uuid(_ uuid: Swift.String) -> LikeMindsFeed.ReportRequest
  public func reason(_ reason: Swift.String) -> LikeMindsFeed.ReportRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class GetAllMembersRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetAllMembersRequest
  public func build() -> LikeMindsFeed.GetAllMembersRequest
  public func page(_ page: Swift.Int) -> LikeMindsFeed.GetAllMembersRequest
  public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.GetAllMembersRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct Community : Swift.Decodable {
  public let autoApproval: Swift.Bool?
  public let communitySettingRights: [LikeMindsFeed.CommunitySettingRight]?
  public let feeEvent: Swift.Int?, feeMembership: Swift.Int?, feePaymentPages: Swift.Int?, gracePeriod: Swift.Int?
  public let hideDmTab: Swift.Bool?
  public let id: Swift.Int?
  public let imageURL: Swift.String?
  public let isDiscoverable: Swift.Bool?, isFreemiumCommunity: Swift.Bool?, isPaid: Swift.Bool?, isWhitelabel: Swift.Bool?
  public let membersCount: Swift.Int?
  public let name: Swift.String?, purpose: Swift.String?
  public let referralEnabled: Swift.Bool?
  public let subType: Swift.Int?, type: Swift.Int?, updatedAt: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
}
public struct CommunitySettingRight : Swift.Decodable {
  public let id: Swift.Int?
  public let isLocked: Swift.Bool?, isSelected: Swift.Bool?
  public let state: Swift.Int?
  public let title: Swift.String?, subTitle: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class DeletePostRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.DeletePostRequest
  public func build() -> LikeMindsFeed.DeletePostRequest
  public func postId(_ postId: Swift.String) -> LikeMindsFeed.DeletePostRequest
  public func deleteReason(_ reason: Swift.String?) -> LikeMindsFeed.DeletePostRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class EditPostRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.EditPostRequest
  public func build() -> LikeMindsFeed.EditPostRequest
  public func postId(_ postId: Swift.String) -> LikeMindsFeed.EditPostRequest
  public func attachments(_ attachments: [LikeMindsFeed.Attachment]) -> LikeMindsFeed.EditPostRequest
  public func text(_ text: Swift.String?) -> LikeMindsFeed.EditPostRequest
  public func heading(_ heading: Swift.String?) -> LikeMindsFeed.EditPostRequest
  public func onBehalfOfUUID(_ onBehalfOfUUID: Swift.String?) -> LikeMindsFeed.EditPostRequest
  public func addTopics(_ topics: [Swift.String]) -> LikeMindsFeed.EditPostRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class RegisterDeviceRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.RegisterDeviceRequest
  public func build() -> LikeMindsFeed.RegisterDeviceRequest
  public func userId(_ userId: Swift.String) -> LikeMindsFeed.RegisterDeviceRequest
  public func token(_ token: Swift.String) -> LikeMindsFeed.RegisterDeviceRequest
  public func deviceId(_ deviceId: Swift.String) -> LikeMindsFeed.RegisterDeviceRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct GetAllMembersResponse : Swift.Decodable {
  public let community: LikeMindsFeed.Community?
  public let members: [LikeMindsFeed.User]?
  public let totalFilteredMembers: Swift.Int?, totalMembers: Swift.Int?, totalOnlyMembers: Swift.Int?, totalPendingMembers: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
}
public class Fonts {
  public init(regular: Swift.String, medium: Swift.String, bold: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AddPostRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.AddPostRequest
  public func build() -> LikeMindsFeed.AddPostRequest
  public func attachments(_ attachments: [LikeMindsFeed.Attachment]) -> LikeMindsFeed.AddPostRequest
  public func text(_ text: Swift.String?) -> LikeMindsFeed.AddPostRequest
  public func heading(_ heading: Swift.String?) -> LikeMindsFeed.AddPostRequest
  public func tempId(_ tempId: Swift.String) -> LikeMindsFeed.AddPostRequest
  public func onBehalfOfUUID(_ onBehalfOfUUID: Swift.String?) -> LikeMindsFeed.AddPostRequest
  public func addTopics(_ topics: [Swift.String]) -> LikeMindsFeed.AddPostRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class LMLogger {
  @objc deinit
}
public class BrandingRequest : Swift.Encodable {
  public var communityId: Swift.Int
  public init(communityId: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct MenuItem : Swift.Codable {
  public let id: Swift.Int
  public let title: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetTaggingListResponse : Swift.Decodable {
  public let members: [LikeMindsFeed.User]?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class MarkReadNotificationRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.MarkReadNotificationRequest
  public func build() -> LikeMindsFeed.MarkReadNotificationRequest
  public func activityId(_ activityId: Swift.String) -> LikeMindsFeed.MarkReadNotificationRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class OGTags : Swift.Codable {
  public var title: Swift.String?, image: Swift.String?, description: Swift.String?, url: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  public init()
  public func title(_ title: Swift.String) -> LikeMindsFeed.OGTags
  public func image(_ image: Swift.String) -> LikeMindsFeed.OGTags
  public func description(_ description: Swift.String) -> LikeMindsFeed.OGTags
  public func url(_ url: Swift.String) -> LikeMindsFeed.OGTags
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class TopicFeedRequest {
  public static func builder() -> LikeMindsFeed.TopicFeedRequest
  public func build() -> Self
  public func setSearchTopic(_ topicName: Swift.String) -> Self
  public func setSearchType(_ searchType: Swift.String) -> Self
  public func setEnableState(_ isEnabled: Swift.Bool) -> Self
  public func setPage(_ pageNumber: Swift.Int) -> Self
  public func setPageSize(_ pageSize: Swift.Int) -> Self
  @objc deinit
}
public struct DecodeUrlResponse : Swift.Decodable {
  public let oGTags: LikeMindsFeed.OGTags?
  public init(from decoder: any Swift.Decoder) throws
}
public struct Like : Swift.Codable {
  public let id: Swift.String
  public let createdAt: Swift.Int?, updatedAt: Swift.Int?
  public let uuid: Swift.String?
  public let userId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class LMChatClient {
  public init(apiKey: Swift.String)
  public func domainUrl(_ domain: Swift.String) -> LikeMindsFeed.LMChatClient
  public func deviceUUID(_ deviceUUID: Swift.String) -> LikeMindsFeed.LMChatClient
  public func callback(_ callback: any LikeMindsFeed.LikeMindsCallback) -> LikeMindsFeed.LMChatClient
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GetFeedRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetFeedRequest
  public func build() -> LikeMindsFeed.GetFeedRequest
  public func page(_ page: Swift.Int) -> LikeMindsFeed.GetFeedRequest
  public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.GetFeedRequest
  public func topics(_ topics: [Swift.String]) -> LikeMindsFeed.GetFeedRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct LikedUser : Swift.Codable {
  public let userId: Swift.Int
  public let user: LikeMindsFeed.User?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BrandingResponse : Swift.Decodable, Swift.Encodable {
  public var basicColor: LikeMindsFeed.BasicColor?
  public var advanceColor: LikeMindsFeed.AdvanceColor?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BasicColor : Swift.Decodable, Swift.Encodable {
  public var basicColor: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AdvanceColor : Swift.Decodable, Swift.Encodable {
  public var headerColor: Swift.String?
  public var buttonIconsColour: Swift.String?
  public var textLinksColour: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum MemberRightState : Swift.Int, Swift.Codable {
  case unknown
  case createChatRooms
  case createPolls
  case createEvents
  case respondsInChatRoom
  case inviteMemberFromPrivateLink
  case autoApproveCreatedChatroom
  case createSecretChatRoom
  case directMessage
  case noClearYet
  case createPost
  case commentOrReplyOnPost
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [LikeMindsFeed.MemberRightState]
  public typealias RawValue = Swift.Int
  public static var allCases: [LikeMindsFeed.MemberRightState] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum ManagerRightState : Swift.Int, Swift.Codable {
  case unknown
  case moderateChatRooms
  case moderateMembers
  case editCommunityDetails
  case viewMemberContactInfo
  case addCommunityManager
  case moderateDMSetting
  case moderateFeedAndComment
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [LikeMindsFeed.ManagerRightState]
  public typealias RawValue = Swift.Int
  public static var allCases: [LikeMindsFeed.ManagerRightState] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public struct MemberRight : Swift.Codable {
  public let id: Swift.Int?
  public let isLocked: Swift.Bool?, isSelected: Swift.Bool?
  public let state: LikeMindsFeed.MemberRightState?
  public let title: Swift.String?
  public let subTitle: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ManagerRight : Swift.Codable {
  public let id: Swift.Int?
  public let isLocked: Swift.Bool?, isSelected: Swift.Bool?
  public let state: LikeMindsFeed.ManagerRightState?
  public let title: Swift.String?
  public let subTitle: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TopicFeedResponse : Swift.Decodable {
  public let topics: [LikeMindsFeed.TopicFeedResponse.TopicResponse]?
  public struct TopicResponse : Swift.Decodable {
    public let id: Swift.String?
    public let isEnabled: Swift.Bool?
    public let name: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class LMFeedClient {
  public static var shared: LikeMindsFeed.LMFeedClient {
    get
  }
  public static func builder() -> LikeMindsFeed.LMFeedClient
  public func lmCallback(_ lmCallback: (any LikeMindsFeed.LMCallback)?) -> LikeMindsFeed.LMFeedClient
  public func build() -> LikeMindsFeed.LMFeedClient
  @objc deinit
}
public struct GetFeedOfFeedRoomRequest : Swift.Encodable {
  public init(feedroomId: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct Post : Swift.Decodable {
  public let id: Swift.String
  public let attachments: [LikeMindsFeed.Attachment]?
  public let commentsCount: Swift.Int?, communityID: Swift.Int?, createdAt: Swift.Int?
  public let isPinned: Swift.Bool?, isSaved: Swift.Bool?, isEdited: Swift.Bool?, isDeleted: Swift.Bool?
  public let isLiked: Swift.Bool?
  public let likesCount: Swift.Int?
  public let menuItems: [LikeMindsFeed.MenuItem]?
  public let text: Swift.String?
  public let heading: Swift.String?
  public let updatedAt: Swift.Int?
  public let userId: Swift.String?, uuid: Swift.String?, deletedByUUID: Swift.String?, deleteReason: Swift.String?
  public let replies: [LikeMindsFeed.Comment]?
  public let topics: [Swift.String]?
  public let tempId: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetReportTagResponse : Swift.Decodable {
  public let reportTags: [LikeMindsFeed.ReportTag]?
  public init(from decoder: any Swift.Decoder) throws
}
public struct ReportTag : Swift.Decodable {
  public let id: Swift.Int?
  public let name: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetCommunityConfigurationResponse : Swift.Decodable {
  public let communityConfigurations: [LikeMindsFeed.CommunityConfiguration]?
  public init(from decoder: any Swift.Decoder) throws
}
public struct CommunityConfiguration : Swift.Codable {
  public let type: Swift.String?
  public let value: LikeMindsFeed.CommunityConfiguration.Value?
  public let description: Swift.String?
  public struct Value : Swift.Codable {
    public let post: Swift.String?
    public let maxVideoSize: Swift.Int?, maxImageSize: Swift.Int?
    public let widgetsEnabled: Swift.Bool?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum MemberState : Swift.Int, Swift.Codable {
  case admin
  case member
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct GetMemberStateResponse : Swift.Codable {
  public let createdAt: Swift.String?
  public let editRequired: Swift.Bool?
  public let member: LikeMindsFeed.User?
  public let managerRights: [LikeMindsFeed.ManagerRight]?
  public let memberRights: [LikeMindsFeed.MemberRight]?
  public let state: Swift.Int?
  public let toolState: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class AttachmentMeta : Swift.Codable {
  public var attachmentUrl: Swift.String?
  public var format: Swift.String?, name: Swift.String?
  public var pageCount: Swift.Int?, duration: Swift.Int?, size: Swift.Int?
  public var ogTags: LikeMindsFeed.OGTags?
  public var coverImageUrl: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var body: Swift.String? {
    get
  }
  public var entityID: Swift.String? {
    get
  }
  public var thumbnailUrl: Swift.String? {
    get
  }
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func attachmentUrl(_ attachmentUrl: Swift.String) -> LikeMindsFeed.AttachmentMeta
  public func pageCount(_ pageCount: Swift.Int) -> LikeMindsFeed.AttachmentMeta
  public func format(_ format: Swift.String) -> LikeMindsFeed.AttachmentMeta
  public func name(_ name: Swift.String) -> LikeMindsFeed.AttachmentMeta
  public func duration(_ duration: Swift.Int) -> LikeMindsFeed.AttachmentMeta
  public func size(_ size: Swift.Int) -> LikeMindsFeed.AttachmentMeta
  public func ogTags(_ ogTags: LikeMindsFeed.OGTags) -> LikeMindsFeed.AttachmentMeta
  public func thumbnailUrl(_ thumbnailUrl: Swift.String?) -> LikeMindsFeed.AttachmentMeta
  public func coverImageUrl(_ coverImageUrl: Swift.String) -> LikeMindsFeed.AttachmentMeta
  public func title(_ title: Swift.String) -> LikeMindsFeed.AttachmentMeta
  public func body(_ body: Swift.String) -> LikeMindsFeed.AttachmentMeta
  public func entityID(_ entityID: Swift.String) -> LikeMindsFeed.AttachmentMeta
  public func attachmentMetaData() -> LikeMindsFeed.AttachmentMeta
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct GetCommentsLikeResponse : Swift.Codable {
  public let likes: [LikeMindsFeed.Like]
  public let totalLikes: Swift.Int
  public let users: [Swift.String : LikeMindsFeed.User]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class PinPostRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.PinPostRequest
  public func build() -> LikeMindsFeed.PinPostRequest
  public func postId(_ postId: Swift.String) -> LikeMindsFeed.PinPostRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class ReplyCommentRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.ReplyCommentRequest
  public func build() -> LikeMindsFeed.ReplyCommentRequest
  public func postId(_ postId: Swift.String) -> LikeMindsFeed.ReplyCommentRequest
  public func commentId(_ commentId: Swift.String) -> LikeMindsFeed.ReplyCommentRequest
  public func text(_ text: Swift.String?) -> LikeMindsFeed.ReplyCommentRequest
  public func tempId(_ tempId: Swift.String?) -> LikeMindsFeed.ReplyCommentRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public typealias LMFeedClientResponse<T> = (LikeMindsFeed.LMResponse<T>) -> (Swift.Void) where T : Swift.Decodable
extension LikeMindsFeed.LMFeedClient {
  public func initiateUser(request: LikeMindsFeed.InitiateUserRequest, response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.InitiateUserResponse>?)
  public func getFeed(_ request: LikeMindsFeed.GetFeedRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetFeedResponse>?)
  public func addPost(_ request: LikeMindsFeed.AddPostRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetPostResponse>?)
  public func getPost(_ request: LikeMindsFeed.GetPostRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetPostResponse>?)
  public func getPostLikes(_ request: LikeMindsFeed.GetPostLikesRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetPostLikeResponse>?)
  public func deletePost(_ request: LikeMindsFeed.DeletePostRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.NoData>?)
  public func deleteComment(_ request: LikeMindsFeed.DeleteCommentRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.NoData>?)
  public func likePost(_ request: LikeMindsFeed.LikePostRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.NoData>?)
  public func savePost(_ request: LikeMindsFeed.SavePostRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.NoData>?)
  public func addComment(_ request: LikeMindsFeed.AddCommentRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetCommentResponse>?)
  public func replyComment(_ request: LikeMindsFeed.ReplyCommentRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.ReplyCommentResponse>?)
  public func getComment(_ request: LikeMindsFeed.GetCommentRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetCommentResponse>?)
  public func getCommentLikes(_ request: LikeMindsFeed.GetCommentLikesRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetCommentsLikeResponse>?)
  public func likeComment(_ request: LikeMindsFeed.LikeCommentRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.NoData>?)
  public func getMemberState(_ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetMemberStateResponse>?)
  public func getFeedOfFeedRoom(_ request: LikeMindsFeed.GetFeedOfFeedRoomRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetFeedOfFeedRoomResponse>?)
  public func report(_ request: LikeMindsFeed.ReportRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.NoData>?)
  public func decodeUrl(_ request: LikeMindsFeed.DecodeUrlRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.DecodeUrlResponse>?)
  public func getReportTags(_ request: LikeMindsFeed.GetReportTagRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetReportTagResponse>?)
  public func getTaggingList(_ request: LikeMindsFeed.GetTaggingListRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetTaggingListResponse>?)
  public func registerDevice(request: LikeMindsFeed.RegisterDeviceRequest, response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.RegisterDeviceResponse>?)
  public func logout(request: LikeMindsFeed.LogoutRequest, response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.NoData>?)
  public func pinPost(_ request: LikeMindsFeed.PinPostRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.NoData>?)
  public func editPost(_ request: LikeMindsFeed.EditPostRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.EditPostResponse>?)
  public func editComment(_ request: LikeMindsFeed.EditCommentRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.EditCommentResponse>?)
  public func markReadNotification(_ request: LikeMindsFeed.MarkReadNotificationRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.NoData>?)
  public func getUnreadNotificationCount(_ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetUnreadNotificationCountResponse>?)
  public func getNotificationFeed(_ request: LikeMindsFeed.GetNotificationFeedRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetNotificationFeedResponse>?)
  public func getAllMembers(_ request: LikeMindsFeed.GetAllMembersRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetAllMembersResponse>?)
  public func searchMembers(_ request: LikeMindsFeed.SearchMembersRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.SearchMembersResponse>?)
  public func getTopicFeed(_ request: LikeMindsFeed.TopicFeedRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.TopicFeedResponse>?)
  public func getCommunityConfiguration(_ request: LikeMindsFeed.GetCommunityConfigurationRequest, _ response: LikeMindsFeed.LMFeedClientResponse<LikeMindsFeed.GetCommunityConfigurationResponse>?)
}
public struct GetFeedResponse : Swift.Decodable {
  public let posts: [LikeMindsFeed.Post]?
  public let users: [Swift.String : LikeMindsFeed.User]?
  public let topics: [Swift.String : LikeMindsFeed.TopicFeedResponse.TopicResponse]?
  public let widgets: [Swift.String : LikeMindsFeed.Widget]?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SavePostRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.SavePostRequest
  public func build() -> LikeMindsFeed.SavePostRequest
  public func postId(_ postId: Swift.String) -> LikeMindsFeed.SavePostRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum AttachmentType : Swift.Int, Swift.Encodable {
  case image
  case video
  case doc
  case link
  case audio
  case poll
  case article
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class Attachment : Swift.Codable {
  public var attachmentType: LikeMindsFeed.AttachmentType?
  public var attachmentMeta: LikeMindsFeed.AttachmentMeta?
  required public init(from decoder: any Swift.Decoder) throws
  public init()
  public func attachmentMeta(_ attachmentMeta: LikeMindsFeed.AttachmentMeta) -> LikeMindsFeed.Attachment
  public func attachmentType(_ attachmentType: LikeMindsFeed.AttachmentType) -> LikeMindsFeed.Attachment
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct User : Swift.Codable {
  public let id: Swift.Int?
  public let imageUrl: Swift.String?, name: Swift.String?, organisationName: Swift.String?
  public let userUniqueID: Swift.String?, uuid: Swift.String?
  public let isGuest: Swift.Bool
  public let isDeleted: Swift.Bool?
  public let isOwner: Swift.Bool?
  public let customTitle: Swift.String?
  public let state: Swift.Int?, updatedAt: Swift.Int?
  public let sdkClientInfo: LikeMindsFeed.SDKClientInfo?
  public let memberSince: Swift.String?
  public let memberSinceEpoch: Swift.Int?
  public let menu: [LikeMindsFeed.MemberMenu]?
  public let questionAnswers: [LikeMindsFeed.QuestionAnswer]?
  public let route: Swift.String?
  public let customIntroText: Swift.String?
  public var clientUUID: Swift.String? {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct QuestionAnswer : Swift.Codable {
  public let question: LikeMindsFeed.Question?
  public let answer: LikeMindsFeed.Answer?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Question : Swift.Codable {
  public let communityID: Swift.Int?
  public let directoryFields: Swift.Bool?, isHidden: Swift.Bool?
  public let memberID: Swift.Int?, questionID: Swift.Int?
  public let questionTitle: Swift.String?
  public let state: Swift.Int?
  public let tag: Swift.String?
  public let value: Swift.String?
  public let imageURL: Swift.String?
  public let dropdownSelectionLimit: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Answer : Swift.Codable {
  public let communityID: Swift.Int?, memberID: Swift.Int?, questionID: Swift.Int?
  public let answer: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetNotificationFeedResponse : Swift.Decodable {
  public let activities: [LikeMindsFeed.Activity]?
  public let users: [Swift.String : LikeMindsFeed.User]?
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class AddCommentRequest : Swift.Encodable {
  public var text: Swift.String?
  public var postId: Swift.String?
  public var tempId: Swift.String?
  public static func builder() -> LikeMindsFeed.AddCommentRequest
  public func build() -> LikeMindsFeed.AddCommentRequest
  public func postId(_ postId: Swift.String) -> LikeMindsFeed.AddCommentRequest
  public func text(_ text: Swift.String) -> LikeMindsFeed.AddCommentRequest
  public func tempId(_ tempId: Swift.String) -> LikeMindsFeed.AddCommentRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class GetPostLikesRequest : Swift.Encodable {
  public static func builder() -> LikeMindsFeed.GetPostLikesRequest
  public func build() -> LikeMindsFeed.GetPostLikesRequest
  public func postId(_ postId: Swift.String) -> LikeMindsFeed.GetPostLikesRequest
  public func page(_ page: Swift.Int) -> LikeMindsFeed.GetPostLikesRequest
  public func pageSize(_ pageSize: Swift.Int) -> LikeMindsFeed.GetPostLikesRequest
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
extension LikeMindsFeed.ReportEntityType : Swift.Equatable {}
extension LikeMindsFeed.ReportEntityType : Swift.Hashable {}
extension LikeMindsFeed.ReportEntityType : Swift.RawRepresentable {}
extension LikeMindsFeed.MemberRightState : Swift.RawRepresentable {}
extension LikeMindsFeed.MemberRightState : Swift.CaseIterable {}
extension LikeMindsFeed.MemberRightState : Swift.Equatable {}
extension LikeMindsFeed.MemberRightState : Swift.Hashable {}
extension LikeMindsFeed.ManagerRightState : Swift.RawRepresentable {}
extension LikeMindsFeed.ManagerRightState : Swift.CaseIterable {}
extension LikeMindsFeed.ManagerRightState : Swift.Equatable {}
extension LikeMindsFeed.ManagerRightState : Swift.Hashable {}
extension LikeMindsFeed.MemberState : Swift.Equatable {}
extension LikeMindsFeed.MemberState : Swift.Hashable {}
extension LikeMindsFeed.MemberState : Swift.RawRepresentable {}
extension LikeMindsFeed.AttachmentType : Swift.Equatable {}
extension LikeMindsFeed.AttachmentType : Swift.Hashable {}
extension LikeMindsFeed.AttachmentType : Swift.RawRepresentable {}
